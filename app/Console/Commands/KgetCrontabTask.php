<?phpnamespace App\Console\Commands;use App\Http\Controllers\Common\DataBaseConnection;use Illuminate\Console\Command;use Illuminate\Support\Facades\DB;use Illuminate\Support\Facades\Log;use Illuminate\Http\Request;use App\Models\Kget\COLUMNS;use Mail;use Config;use DateTime;class KgetCrontabTask extends Command{    /**     * The name and signature of the console command.     *     * @var string     */    protected $signature = 'kget:email push';    /**     * The console command description.     *     * @var string     */    protected $description = 'push kgetData to specified user';    /**     * Create a new command instance.     *     * @return void     */    public function __construct()    {        parent::__construct();    }    /**     * Execute the console command.     *     * @return mixed     */    public function handle()    {        $dbc = new DataBaseConnection();        $kgetCrontabTasks = DB::table('kgetCrontabTask')->where('status','=','ON')->get()->toArray();        foreach ($kgetCrontabTasks as $kgetCrontabTask) {            $kgetTaskValue  = $kgetCrontabTask->kget;            $moName         = $kgetCrontabTask->moName;            $city           = $kgetCrontabTask->city;            $subNet         = $kgetCrontabTask->subNetwork;            $baseStation    = $kgetCrontabTask->meContext;            $kgetParamValue = $kgetCrontabTask->params;            $email          = $kgetCrontabTask->Email;            $user           = $kgetCrontabTask->user;            $taskName       = $kgetCrontabTask->taskName;            $dataSource     = 'KGET';            $dataType       = 'ALL';                    Config::set('database.connections.kget.database', $kgetTaskValue);            $db          = DB::connection('kget')->getPdo();            $moNameQuery = DB::connection('kget')->table($moName);            $title       = '';            if ($kgetParamValue) {                $moNameQuery = $moNameQuery->selectRaw($kgetParamValue);                ;                $title       = 'select '.'"'.str_replace(',', '","', $kgetParamValue).'" union all ';            } else {                $params      = COLUMNS::selectRaw('concat(\'"\',GROUP_CONCAT(COLUMN_NAME SEPARATOR \'","\'),\'"\') as params')->where('TABLE_SCHEMA','=',$kgetTaskValue)->where('TABLE_NAME','=',$moName)->first()->toArray();                $title       = 'select '.$params['params'].' union all ';            }            $bindParams     = [];            $allSubNetGroup = [];            if ($city) {                $subNetAll = $dbc->getSubnetwork(explode(',', $city),$dataSource,$dataType);                foreach ($subNetAll as $city => $subNets) {                    $allSubNetGroup = array_merge($allSubNetGroup, $subNets);                }            }                        if ($subNet) {                $subNetGroup    = [];                foreach (explode(',', $subNet) as $value) {                    $subNetGroup[] = explode(':', $value)[1];                }                $allSubNetGroup = array_intersect($allSubNetGroup, $subNetGroup);            }            if ($allSubNetGroup) {                $moNameQuery = $moNameQuery->whereIn('subNetwork',$allSubNetGroup);                $bindParams  = $allSubNetGroup;            }            if ($baseStation) {                $baseStationGroup = explode(',', $baseStation);                $moNameQuery      = $moNameQuery->whereIn('meContext',$baseStationGroup);                $bindParams       = array_merge($bindParams,$baseStationGroup);            }                        $sql      = $moNameQuery->toSql();            $filePath = "../QAT/";            $fileName = "app/kget/".$kgetTaskValue .'_'.$taskName. '_' . $moName . '_' . date('YmdHis') . '.csv';            $sql = $title.$sql." INTO OUTFILE '".$filePath.$fileName."'                    FIELDS TERMINATED BY ','                     OPTIONALLY ENCLOSED BY '\"'                     LINES TERMINATED BY '\\n'";            $stmt = $db->prepare($sql);            if ($stmt->execute($bindParams)) {                $flag = Mail::send('emails.email',['name'=>$user],function($message) use ($email,$taskName,$fileName){                    $message ->to($email)->subject($taskName);                    $attachment = storage_path($fileName);                    //在邮件中上传附件                    $message->attach($attachment,['as'=>$fileName]);                });            }        }    }}?>